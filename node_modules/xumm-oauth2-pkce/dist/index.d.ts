/// <reference types="node" />
import { EventEmitter } from "events";
import { XummSdkJwt } from "xumm-sdk";
interface XummPkceOptions {
    redirectUrl: string;
    rememberJwt: boolean;
    storage: Storage;
    implicit: boolean;
}
export interface XummProfile {
    slug: string;
    profileUrl: string;
    accountSlug: string | null;
    payString: string | null;
}
export interface ResolvedFlow {
    sdk: XummSdkJwt;
    jwt: string;
    me: {
        sub: string;
        picture: string;
        account: string;
        name?: string;
        domain?: string;
        blocked: boolean;
        source: string;
        kycApproved: boolean;
        proSubscription: boolean;
        profile?: XummProfile;
    };
}
export interface XummPkceEvent {
    retrieved: () => void;
    error: (error: Error) => void;
    success: () => void;
    loggedout: () => void;
}
export declare interface XummPkceThread {
    on<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this;
    off<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this;
}
export declare class XummPkceThread extends EventEmitter {
    private pkce;
    private options;
    private popup;
    private jwt?;
    private ping?;
    private resolved;
    private resolvedSuccessfully?;
    private resolvePromise?;
    private rejectPromise?;
    private promise?;
    private autoResolvedFlow?;
    private mobileRedirectFlow;
    private urlParams?;
    private eventPromises;
    constructor(xummApiKey: string, optionsOrRedirectUrl?: string | Partial<XummPkceOptions>);
    emit<U extends keyof XummPkceEvent>(event: U, ...args: any[]): boolean;
    authorizeUrl(): string;
    private handleMobileGrant;
    authorize(): Promise<ResolvedFlow | undefined>;
    state(): Promise<ResolvedFlow | undefined>;
    logout(): void;
    getPopup(): Window | null | undefined;
}
export declare class XummPkce {
    constructor(xummApiKey: string, optionsOrRedirectUrl?: string | Partial<XummPkceOptions>);
    on<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this | undefined;
    off<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this | undefined;
    authorize(): Promise<ResolvedFlow | undefined> | undefined;
    state(): Promise<ResolvedFlow | undefined> | undefined;
    logout(): void;
}
export {};
