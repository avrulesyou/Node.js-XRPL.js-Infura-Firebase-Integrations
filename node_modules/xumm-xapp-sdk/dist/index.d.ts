import { AnyJson, xAppEvent, xAppActionNavigate, xAppActionOpenSignRequest, xAppActionOpenBrowser, xAppActionTxDetails, xAppActionSelectDestination, xAppActionClose, xAppActionShare, xAppEnvironment } from "./types";
export * from "./types";
export declare interface xApp {
    on<U extends keyof xAppEvent>(event: U, listener: xAppEvent[U]): this;
    off<U extends keyof xAppEvent>(event: U, listener: xAppEvent[U]): this;
}
export declare class xApp {
    private xummEnvironment;
    constructor();
    getEnvironment(): xAppEnvironment;
    navigate(navigateOptions: xAppActionNavigate): Promise<boolean | Error> | void;
    openSignRequest(openSignRequestOptions: xAppActionOpenSignRequest | null | undefined): Promise<boolean | Error> | void;
    selectDestination(selectDestinationOptions?: xAppActionSelectDestination): Promise<boolean | Error> | void;
    openBrowser(openBrowserOptions: xAppActionOpenBrowser): Promise<boolean | Error> | void;
    share(shareOptions: xAppActionShare): Promise<boolean | Error> | void;
    scanQr(): Promise<boolean | Error> | void;
    tx(txOptions: xAppActionTxDetails): Promise<boolean | Error> | void;
    close(closeOptions?: xAppActionClose): Promise<boolean | Error> | void;
    ready(): Promise<boolean | Error> | void;
    customCommand(customCommand: string, customCommandOptions?: AnyJson): Promise<boolean | Error> | void;
}
