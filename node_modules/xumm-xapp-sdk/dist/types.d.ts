export declare type AnyJson = Record<string, any>;
export interface xAppDomWindow {
    ReactNativeWebView?: {
        postMessage(message: any): void;
    };
    parent?: {
        postMessage(message: any, target: string): void;
    };
}
export declare enum xAppEvents {
    scanQr = "scanQr",
    payloadResolved = "payloadResolved",
    selectDestination = "selectDestination"
}
export interface qrEventData {
    qrContents?: null;
    reason: "USER_CLOSE" | "INVALID_QR" | "SCANNED";
}
export interface payloadEventData {
    reason: "DECLINED" | "SIGNED";
}
export interface destinationEventData {
    destination?: {
        address: string;
        tag?: number;
        name?: string;
    };
    info?: {
        blackHole: boolean;
        disallowIncomingXRP: false;
        exist: boolean;
        possibleExchange: false;
        requireDestinationTag: boolean;
        risk: "ERROR" | "UNKNOWS" | "PROBABLE" | "HIGH_PROBABILITY" | "CONFIRMED";
    };
    reason: "SELECTED" | "USER_CLOSE";
}
export interface xAppReceivedEvent extends Event {
    data: string;
}
export interface xAppReceivedEventData {
    method?: keyof xAppEvents;
}
export interface xAppEvent {
    qr: (data: qrEventData) => void;
    payload: (data: payloadEventData) => void;
    destination: (data: destinationEventData) => void;
}
export interface xAppActionNavigate extends AnyJson {
    xApp: string;
}
export interface xAppActionOpenSignRequest extends AnyJson {
    uuid: string;
}
export interface xAppActionOpenBrowser extends AnyJson {
    url: string;
}
export interface xAppActionShare {
    text?: string;
}
export interface xAppActionClose {
    refreshEvents?: boolean;
}
export interface xAppActionTxDetails {
    tx: string;
    account: string;
}
export interface xAppActionReady {
}
export interface xAppActionSelectDestination {
    ignoreDestinationTag?: boolean;
}
export interface xAppEnvironment {
    version: string;
    ott: string;
}
