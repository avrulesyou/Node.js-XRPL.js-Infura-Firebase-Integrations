/// <reference types="node" />
import { EventEmitter } from "events";
import { WsClientOptions, Call, AnyJson, ConnectionState, ServerState, SendOptions, XrplClientEvents, ClusterInfo, ConnectReinstateOptions } from "./types";
export * from "./types";
export declare const defaultEndpoints: string[];
export declare interface XrplClient {
    on<U extends keyof XrplClientEvents>(event: U, listener: XrplClientEvents[U]): this;
}
export declare class XrplClient extends EventEmitter {
    private eventBus;
    private closed;
    private destroyed;
    private uplinkReady;
    private options;
    private callId;
    private endpoints;
    private endpoint;
    private connection?;
    private pendingCalls;
    private subscriptions;
    private networkDefinitions;
    private clusterInfo_?;
    private serverInfo?;
    private serverState;
    private lastContact?;
    constructor(endpoint?: string | string[], options?: WsClientOptions);
    ready(): Promise<XrplClient>;
    definitions(): Promise<AnyJson | null>;
    send(call: Call, sendOptions?: SendOptions): Promise<AnyJson>;
    getState(forcedServerState?: ServerState): ConnectionState;
    close(): void;
    reinstate(options?: ConnectReinstateOptions): void;
    destroy(): void;
    clusterInfo(): Promise<ClusterInfo | false>;
}
